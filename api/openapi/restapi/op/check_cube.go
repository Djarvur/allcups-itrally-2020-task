// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CheckCubeHandlerFunc turns a function with the right signature into a check cube handler
type CheckCubeHandlerFunc func(CheckCubeParams) CheckCubeResponder

// Handle executing the request and returning a response
func (fn CheckCubeHandlerFunc) Handle(params CheckCubeParams) CheckCubeResponder {
	return fn(params)
}

// CheckCubeHandler interface for that can handle valid check cube params
type CheckCubeHandler interface {
	Handle(CheckCubeParams) CheckCubeResponder
}

// NewCheckCube creates a new http.Handler for the check cube operation
func NewCheckCube(ctx *middleware.Context, handler CheckCubeHandler) *CheckCube {
	return &CheckCube{Context: ctx, Handler: handler}
}

/*CheckCube swagger:route POST /check checkCube

Returns number of objects (treasures or even rocks) in the provided cube.

*/
type CheckCube struct {
	Context *middleware.Context
	Handler CheckCubeHandler
}

func (o *CheckCube) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckCubeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
