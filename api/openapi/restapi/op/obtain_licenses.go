// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ObtainLicensesHandlerFunc turns a function with the right signature into a obtain licenses handler
type ObtainLicensesHandlerFunc func(ObtainLicensesParams) ObtainLicensesResponder

// Handle executing the request and returning a response
func (fn ObtainLicensesHandlerFunc) Handle(params ObtainLicensesParams) ObtainLicensesResponder {
	return fn(params)
}

// ObtainLicensesHandler interface for that can handle valid obtain licenses params
type ObtainLicensesHandler interface {
	Handle(ObtainLicensesParams) ObtainLicensesResponder
}

// NewObtainLicenses creates a new http.Handler for the obtain licenses operation
func NewObtainLicenses(ctx *middleware.Context, handler ObtainLicensesHandler) *ObtainLicenses {
	return &ObtainLicenses{Context: ctx, Handler: handler}
}

/*ObtainLicenses swagger:route POST /license obtainLicenses

Returns a newly created license IDs.

*/
type ObtainLicenses struct {
	Context *middleware.Context
	Handler ObtainLicensesHandler
}

func (o *ObtainLicenses) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewObtainLicensesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
