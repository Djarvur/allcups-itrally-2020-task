// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new op API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for op API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Cash(params *CashParams) (*CashCreated, error)

	CheckCube(params *CheckCubeParams) (*CheckCubeOK, error)

	DigCube(params *DigCubeParams) (*DigCubeOK, error)

	GetAccount(params *GetAccountParams) (*GetAccountOK, error)

	ListLicenses(params *ListLicensesParams) (*ListLicensesOK, error)

	ObtainLicenses(params *ObtainLicensesParams) (*ObtainLicensesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Cash Returns a list of found treasures IDs.
*/
func (a *Client) Cash(params *CashParams) (*CashCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCashParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cash",
		Method:             "POST",
		PathPattern:        "/cash",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CashReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CashCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cash: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CheckCube Returns number of objects (treasures or even rocks) in the provided cube.
*/
func (a *Client) CheckCube(params *CheckCubeParams) (*CheckCubeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckCubeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkCube",
		Method:             "POST",
		PathPattern:        "/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CheckCubeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CheckCubeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for checkCube: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DigCube Returns a list of found treasures IDs.
*/
func (a *Client) DigCube(params *DigCubeParams) (*DigCubeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDigCubeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "digCube",
		Method:             "POST",
		PathPattern:        "/dig",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DigCubeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DigCubeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for digCube: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetAccount Returns a current balance.
*/
func (a *Client) GetAccount(params *GetAccountParams) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccount",
		Method:             "GET",
		PathPattern:        "/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLicenses Returns a list of currently provided licenses.
*/
func (a *Client) ListLicenses(params *ListLicensesParams) (*ListLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLicensesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLicenses",
		Method:             "GET",
		PathPattern:        "/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListLicensesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ObtainLicenses Returns a newly created license IDs.
*/
func (a *Client) ObtainLicenses(params *ObtainLicensesParams) (*ObtainLicensesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewObtainLicensesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "obtainLicenses",
		Method:             "POST",
		PathPattern:        "/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ObtainLicensesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ObtainLicensesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for obtainLicenses: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
